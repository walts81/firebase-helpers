import { DatabaseReference, Query } from './firebase-types';
export declare const init: (firebaseConfig: any) => void;
export declare const getPath: (parentRef: DatabaseReference, childPath: string) => string;
export declare const ref: (path: string, firebaseConfig?: any) => import("@firebase/database").DatabaseReference;
export declare const onValue: <T = any>(query: Query, callback: (data: T) => void, defaultValue?: T | undefined, firebaseConfig?: any) => import("@firebase/database").Unsubscribe;
export declare const onChildAdded: <T = any>(query: Query, callback: (data: T) => void, defaultValue?: T | undefined, firebaseConfig?: any) => import("@firebase/database").Unsubscribe;
export declare const onChildChanged: <T = any>(query: Query, callback: (data: T) => void, defaultValue?: T | undefined, firebaseConfig?: any) => import("@firebase/database").Unsubscribe;
export declare const push: <T = any>(ref: DatabaseReference, data: T, firebaseConfig?: any) => Promise<import("@firebase/database").DatabaseReference>;
export declare const remove: (ref: DatabaseReference, firebaseConfig?: any) => Promise<void>;
export declare const update: <T extends object = any>(ref: DatabaseReference, data: T, firebaseConfig?: any) => Promise<void>;
export declare const get: <T = any>(query: Query, defaultValue?: T | undefined, firebaseConfig?: any) => Promise<any>;
export declare const set: <T = any>(ref: DatabaseReference, data: T, firebaseConfig?: any) => Promise<void>;
